import React, { useState } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogFooter } from '@/components/ui/dialog';
import { Shield, Mail, Lock, XCircle } from 'lucide-react';
// ูุง ูุญุชุงุฌ ุฅูู userManager ููุง ูุจุงุดุฑุฉุ ูุฃููุง ูุณุชุฎุฏู ุงูู prop onLogin
// import userManager from "../utils/userManager";

import { ReactTyped } from "react-typed";
import { Helmet } from "react-helmet";

const LoginPage = ({ onLogin }) => {
  const [formData, setFormData] = useState({
    email: '',
    password: ''
  });
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [showErrorDialog, setShowErrorDialog] = useState(false);

  // ููุณ ููุงู ุญุงุฌุฉ ูุงุณุชุฎุฏุงู useNavigate ููุง
  // const navigate = useNavigate();

  const handleChange = (e) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    });
    setShowErrorDialog(false);
    setError('');
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');
    setShowErrorDialog(false);

    if (!formData.email || !formData.password) {
      setError('ูุฑุฌู ููุก ุฌููุน ุงูุญููู');
      setShowErrorDialog(true);
      setLoading(false);
      return;
    }

    // ููุง ูููู ุจุชูุฑูุฑ ุงูุจูุงูุงุช ุฅูู ุงูุฏุงูุฉ onLogin ุงูุชู ุชู ุชูุฑูุฑูุง ูู App.js
    const result = await onLogin(formData.email, formData.password);

    if (result.success) {
      // ูุง ุชูุนู ุดูุฆูุง ููุง.
      // App.js ุณูุชููู ุฅุนุงุฏุฉ ุงูุชูุฌูู ุจุดูู ุชููุงุฆู ุนูุฏ ุชุญุฏูุซ ุญุงูุฉ ุงููุณุชุฎุฏู.
    } else {
      setError(result.message);
      setShowErrorDialog(true);
    }

    setLoading(false);
  };

  return (
      <>
      <Helmet>
        <title>ุชุณุฌูู ุงูุฏุฎูู - ุงูุฃูู ุงูุณูุจุฑุงูู</title>
        <meta name="description" content="ุชุณุฌูู ุงูุฏุฎูู ุฅูู ุญุณุงุจู ูู ููุตุฉ ุงูุฃูู ุงูุณูุจุฑุงูู" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
<meta name="google-adsense-account" content="ca-pub-2404732748519909"></meta>
 
  <meta name="description" content="ุงุจุฏุฃ ุฑุญูุชู ูู ุชุนูู ุงูุฃูู ุงูุณูุจุฑุงูู ูู ุงูุตูุฑ ุญุชู ุงูุงุญุชุฑุงูุ ูุน ุฎุทุฉ ููุธูุฉ ูููุงุฑุฏ ุชุนููููุฉ ุนุงููุฉ ุงูุฌูุฏุฉ ููุฌูุฉ ููุทูุงุจ ูุงูููุชููู ุจุงููุฌุงู." />
  <meta name="keywords" content="ุงูุฃูู ุงูุณูุจุฑุงูู, ุชุนูู ุงูุฃูู ุงูุณูุจุฑุงูู, ุณูุจุฑุงูู, ุงุฎุชุฑุงู, ุญูุงูุฉ ุงูุดุจูุงุช, ุชุนูู ุงูููุฑ ุงูุฃุฎูุงูู, ุฃูู ุงููุนูููุงุช" />
  <meta name="author" content="waheeb al_sharabi" />


  <meta property="og:title" content="ูุณุงุฑ ุชุนูู ุงูุฃูู ุงูุณูุจุฑุงูู ุงูุดุงูู" />
  <meta property="og:description" content="ุงุจุฏุฃ ุฑุญูุชู ูู ุชุนูู ุงูุฃูู ุงูุณูุจุฑุงูู ุจุฎุทุฉ ูุงุถุญุฉ ูุดุงููุฉุ ุฎุทูุฉ ุจุฎุทูุฉ ุญุชู ุงูุงุญุชุฑุงู." />
  <meta property="og:image" content="https://cyberlearn0.netlify.app/og-image.png" />
  <meta property="og:url" content="https://cyberlearn0.netlify.app" />
  <meta property="og:type" content="website" />

  <meta name="twitter:card" content="summary_large_image" />
  <meta name="twitter:title" content="ูุณุงุฑ ุชุนูู ุงูุฃูู ุงูุณูุจุฑุงูู ุงูุดุงูู" />
  <meta name="twitter:description" content="ุงุจุฏุฃ ุฑุญูุชู ูู ุชุนูู ุงูุฃูู ุงูุณูุจุฑุงูู ุจุฎุทุฉ ูุงุถุญุฉ ูุดุงููุฉุ ุฎุทูุฉ ุจุฎุทูุฉ ุญุชู ุงูุงุญุชุฑุงู." />
  <meta name="twitter:image" content="https://cyberlearn0.netlify.app/og-image.png" />
  <link crossorigin href="https://fonts.gstatic.com/" rel="preconnect"/>

  
      </Helmet>
    <div className="min-h-screen flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8 bg-background">
      <div className="max-w-md w-full space-y-8">
        <div className="text-center">
          <div className="flex justify-center">
            <Shield className="h-12 w-12 text-primary" />
          </div>
          <h2 className="mt-6 text-3xl font-bold text-foreground">
            ุชุณุฌูู ุงูุฏุฎูู
          </h2>
          <p className="mt-2 text-sm text-muted-foreground">
            ุฃู{' '}
            <Link to="/register" className="font-medium text-primary hover:text-primary/80">
              ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ
            </Link>
          </p>
        </div>

        <Card>
          <CardHeader>
            <CardTitle className="text-center">ูุฑุญุจุงู ุจุนูุฏุชู</CardTitle>
            <CardDescription className="text-center">
              ุณุฌู ุฏุฎููู ูููุชุงุจุนุฉ ูู ูุณุงุฑู ุงูุชุนูููู
            </CardDescription>
          </CardHeader>
          <CardContent>
            <form onSubmit={handleSubmit} className="space-y-6">
              <div className="space-y-2">
                <Label htmlFor="email">ุงูุจุฑูุฏ ุงูุฅููุชุฑููู</Label>
                <div className="relative">
                  <Mail className="absolute right-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="email"
                    name="email"
                    type="email"
                    required
                    className="pr-10"
                    placeholder="ุฃุฏุฎู ุจุฑูุฏู ุงูุฅููุชุฑููู"
                    value={formData.email}
                    onChange={handleChange}
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="password">ูููุฉ ุงููุฑูุฑ</Label>
                <div className="relative">
                  <Lock className="absolute right-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="password"
                    name="password"
                    type="password"
                    required
                    className="pr-10"
                    placeholder="ุฃุฏุฎู ูููุฉ ุงููุฑูุฑ"
                    value={formData.password}
                    onChange={handleChange}
                  />
                </div>
              </div>

              <Button
                type="submit"
                className="w-full"
                disabled={loading}
              >
                {loading ? 'ุฌุงุฑู ุชุณุฌูู ุงูุฏุฎูู...' : 'ุชุณุฌูู ุงูุฏุฎูู'}
              </Button>
            </form>

            <div className="mt-6 text-center">
              <p className="text-sm text-muted-foreground">
                ููุณ ูุฏูู ุญุณุงุจุ{' '}
                <Link to="/register" className="font-medium text-primary hover:text-primary/80">
                  ุฅูุดุงุก ุญุณุงุจ ุฌุฏูุฏ
                </Link>
              </p>
            </div>
          </CardContent>
        </Card>

        <Dialog open={showErrorDialog} onOpenChange={setShowErrorDialog}>
          <DialogContent className="sm:max-w-md">
            <DialogHeader className="flex items-center space-y-0">
              <XCircle className="h-10 w-10 text-red-500 mb-2" />
              <DialogTitle className="text-red-500">ุญุฏุซ ุฎุทุฃ!</DialogTitle>
              <DialogDescription className="text-center">
                {error}
              </DialogDescription>
            </DialogHeader>
            <DialogFooter className="mt-4">
              <Button onClick={() => setShowErrorDialog(false)}>ุญุณูุงู</Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
<Card className="bg-muted/50">
  <CardContent className="pt-1">
    <h3 className="font-semibold text-lg text-center mb-3 w-full">๐ก ุชุฐูุฑ:</h3>
    <p className="text-xl font-bold text-primary leading-relaxed text-center">
      <ReactTyped
        strings={[
          "ุฑุญูุฉ ุงูุฃูู ููู ุชุจุฏุฃ ุจุฎุทูุฉ.",
          "ูู ููู ุชุชุนูู ูููุ ุฃูุช ุชุชุทูุฑ.",
          "ุงููุดู ูู ุฎุทูุฉ ูุญู ุงููุฌุงุญ.",
          "ุงููุนุฑูุฉ ููุฉุ ูุงูุจุญุซ ููุชุงุญูุง.",
          "ุชุนูู ุดูุฆูุง ุฌุฏูุฏูุง ูู ููู.",
           "ุงููุฌุงุญ ูุญุชุงุฌ ุตุจุฑ ูุงุฌุชูุงุฏุ ูุฃูุช ุนูู ุงูุทุฑูู ุงูุตุญูุญ.",
             "ูู ุฎุทูุฉ ุตุบูุฑุฉ ุชูุฑุจู ุฃูุซุฑ ูู ูุฏูู ูู ุงูุฃูู ุงูุณูุจุฑุงูู.",

        ]}
        typeSpeed={70}
        backSpeed={40}
        backDelay={1500}
        loop
      />
    </p>
  </CardContent>
</Card>

      </div>
    </div>
     </>
  );
};

export default LoginPage;